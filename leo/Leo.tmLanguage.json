{
  "name": "leo",
  "scopeName": "source.leo",
  "scope": "source.leo",
  "fileTypes": ["leo"],
  "extension": ["leo"],
  "patterns": [
    {
      "include": "#function_declaration"
    },
    {
      "include": "#special_functions_call"
    },
    {
      "include": "#import_file"
    },
    {
      "include": "#program_file"
    },
    {
      "include": "#program_keyword"
    },
    {
      "include": "#block_comment"
    },
    {
      "include": "#line_comment"
    },
    {
      "include": "#string_literal"
    },

    {
      "include": "#integer_literal"
    },
    {
      "include": "#built-in_core_assign"
    },
    {
      "include": "#boolean_constant"
    },
    {
      "include": "#import_keyword"
    },
    {
      "include": "#control_keyword"
    },
    {
      "include": "#storage_type_public"
    },
    {
      "include": "#storage_type_private"
    },
    {
      "include": "#storage_type_constant"
    },
    {
      "include": "#storage_type_record"
    },
    {
      "include": "#storage_type_let"
    },
    {
      "include": "#storage_type_then"
    },
    {
      "include": "#storage_type_mapping"
    },
    {
      "include": "#inside_braces"
    },
    {
      "include": "#type_params"
    },
    {
      "include": "#function_parameters"
    },
    {
      "include": "#console_methods"
    }
  ],
  "repository": {
    "import_file": {
      "name": "import.file.leo",
      "comment": "Import file",
      "match": "(?<=\\bimport\\b)\\s+\\b\\w+\\b\\s*\\.\\s*\\b\\w+\\b\\s*(?=;)"
    },
    "program_file": {
      "name": "program.file.leo",
      "comment": "Program file",
      "match": "(?<=\\bprogram\\b)\\s+\\b\\w+\\b\\s*\\.\\s*\\baleo\\b\\s*(?={)"
    },
    "circuit_static_call": {
      "comment": "Circuit staitc call",
      "match": "(\\w+)(?:\\s*::)",
      "captures": {
        "1": {
          "name": "circuit.name.static.call"
        }
      }
    },
    "circuit_call": {
      "comment": "Circuit call",
      "begin": "\\b\\w+\\s*\\{",
      "end": "\\}",
      "patterns": [
        {
          "include": "#inside_braces"
        },
        {
          "include": "#block_comment"
        },
        {
          "include": "#line_comment"
        },
        {
          "include": "#core_types"
        },
        {
          "include": "#integer_literal"
        },
        {
          "include": "#address_literal"
        },
        {
          "include": "#built-in_core_assign"
        },
        {
          "include": "#boolean_constant"
        },
        {
          "include": "#control_keyword"
        },
        {
          "include": "#storage_type_public"
        },
        {
          "include": "#storage_type_private"
        },
        {
          "include": "#storage_type_constant"
        },
        {
          "include": "#storage_type_record"
        },
        {
          "include": "#storage_type_let"
        },
        {
          "include": "#storage_type_then"
        },
        {
          "include": "#string_literal"
        },
        {
          "include": "#invoking_attribute"
        },
        {
          "include": "#console_methods"
        }
      ]
    },
    "record_strucut_definition": {
      "comment": "Record definition",
      "begin": "(?:(?<=\\brecord\\b)|(?<=\\bstruct\\b))\\s+\\b\\w+\\b\\s*\\{",
      "end": "\\}",
      "patterns": [
        {
          "include": "#circuit_attribute"
        },
        {
          "include": "#inside_braces"
        },
        {
          "include": "#core_types"
        },
        {
          "include": "#integer_literal"
        },
        {
          "include": "#built-in_core_assign"
        },
        {
          "include": "#boolean_constant"
        },
        {
          "include": "#control_keyword"
        },
        {
          "include": "#storage_type_public"
        },
        {
          "include": "#storage_type_private"
        },
        {
          "include": "#storage_type_constant"
        },
        {
          "include": "#storage_type_let"
        },
        {
          "include": "#storage_type_then"
        },
        {
          "include": "#string_literal"
        },
        {
          "include": "#block_comment"
        },
        {
          "include": "#line_comment"
        },
        {
          "include": "#invoking_attribute"
        },
        {
          "include": "#type_params"
        },
        {
          "include": "#circuit_static_call"
        },
        {
          "include": "#function_parameters"
        },
        {
          "include": "#console_methods"
        }
      ]
    },
    "address_literal": {
      "comment": "Address",
      "name": "address.literal.value.leo",
      "match": "\\baleo1[a-z0-9]*"
    },
    "invoking_attribute": {
      "comment": "Invoking circuit attribute",
      "match": "(?<=\\.)(?<!\\.\\.)(\\w+(?=\\.)|\\b\\w+\\b(?!\\())",
      "captures": {
        "1": {
          "name": "entity.other.attribute.name"
        }
      }
    },
    "function_declaration": {
      "comment": "Function declaration",
      "name": "function.declaration.leo",
      "match": "(?:(?<=\\bfinalize\\b)|(?<=\\btransition\\b)|(?<=\\bfunction\\b)|(?<=\\binline\\b))\\s+(\\w+)\\s*\\(",
      "captures": {
        "1": {
          "name": "function.declaration.token.leo"
        },
        "2": {
          "name": "function.declaration.name.leo"
        }
      }
    },
    "special_functions_call": {
      "comment": "Special function call",
      "name": "special.functions.call.leo",
      "match": "\\b(finalize|increment|decrement)\\b(?=\\s*\\(.*\\)(?!\\s*{))"
    },
    "function_parameters": {
      "comment": "Function parameters",
      "begin": "(?:(?<=function)|(?<=finalize)|(?<=transition)|(?<=inline))\\s+\\w+\\s*\\(",
      "end": "\\)",
      "patterns": [
        {
          "include": "#function_attribute"
        },
        {
          "include": "#integer_literal"
        },
        {
          "include": "#boolean_constant"
        },
        {
          "include": "#core_types"
        },
        {
          "include": "#storage_type_public"
        },
        {
          "include": "#storage_type_private"
        },
        {
          "include": "#storage_type_constant"
        },
        {
          "include": "#storage_type_record"
        },
        {
          "include": "#line_comment"
        },
        {
          "include": "#block_comment"
        }
      ]
    },
    "function_attribute": {
      "comment": "Function Attribute",
      "match": "\\b(\\w*)\\b\\s*:",
      "captures": {
        "1": {
          "name": "entity.other.function-attribute-name"
        }
      }
    },
    "circuit_attribute": {
      "comment": "Circuit Attribute ",
      "match": "\\b(\\w*)\\b\\s*:",
      "captures": {
        "1": {
          "name": "entity.other.attribute.name"
        }
      }
    },
    "block_comment": {
      "comment": "Block comment",
      "name": "comment.block.leo",
      "begin": "/\\*",
      "end": "\\*/"
    },
    "line_comment": {
      "comment": "Single-line comment",
      "name": "comment.line.double-slash.leo",
      "begin": "//",
      "end": "$"
    },
    "integer_literal": {
      "comment": "Integer literal (decimal)",
      "name": "numeric.integer.decimal.leo",
      "match": "\\b([0-9][0-9_]*)([ui](8|16|32|64|128))?\\b"
    },
    "built-in_core_assign": {
      "comment": "Built-in/core assign",
      "name": "storage.type.assign.leo",
      "match": "\\b(([0-9][0-9_]*)(group|field|scalar))"
    },
    "boolean_constant": {
      "comment": "Boolean constant",
      "name": "constant.language.boolean.leo",
      "match": "\\b(true|false)\\b"
    },
    "import_keyword": {
      "comment": "Import keyword",
      "name": "keyword.control.import.leo",
      "match": "\\b(import)\\b"
    },

    "control_keyword": {
      "comment": "Control keyword",
      "name": "keyword.control.leo",
      "match": "\\b(else|if|in|for|return|as)\\b"
    },
    "storage_type_let": {
      "comment": "Storage type let",
      "name": "storage.type.let.leo",
      "match": "\\b(let)\\b"
    },
    "storage_type_then": {
      "comment": "Storage type then",
      "name": "storage.type.then.leo",
      "match": "\\b(then)\\b"
    },
    "storage_type_mapping": {
      "comment": "Storage type mapping",
      "name": "storage.type.mapping.leo",
      "match": "\\b(mapping)\\b"
    },
    "storage_type_public": {
      "comment": "Storage type public",
      "name": "storage.type.public.leo",
      "match": "\\b(public)\\b"
    },
    "storage_type_private": {
      "comment": "Storage type private",
      "name": "storage.type.private.leo",
      "match": "\\b(private)\\b"
    },
    "storage_type_constant": {
      "comment": "Storage type constant",
      "name": "storage.type.constant.leo",
      "match": "\\b(constant)\\b"
    },
    "storage_type_record": {
      "comment": "Storage type record",
      "name": "storage.type.record.leo",
      "match": "\\b(record)\\b"
    },
    "string_literal": {
      "comment": "Double-quote string literal",
      "name": "string.quoted.double.leo",
      "begin": "\"",
      "end": "\""
    },
    "function_keyword": {
      "comment": "Storage type function",
      "name": "storage.type.function.leo",
      "match": "\\b(function)\\b"
    },
    "finalize_keyword": {
      "comment": "Storage type finalize",
      "name": "storage.type.finalize.leo",
      "match": "\\b(finalize)\\b"
    },
    "struct_keyword": {
      "comment": "Storage type struct",
      "name": "storage.type.struct.leo",
      "match": "\\b(struct)\\b"
    },
    "program_keyword": {
      "comment": "Storage type program",
      "name": "storage.type.program.leo",
      "match": "\\b(program)\\b"
    },
    "async_keyword": {
      "comment": "Storage type async",
      "match": "\\b(async)\\s+(finalize)\\b\\s*\\(",
      "captures": {
        "1": {
          "name": "storage.type.async.leo"
        },
        "2": {
          "name": "storage.type.finalize.call.leo"
        }
      }
    },
    "transition_keyword": {
      "comment": "Storage type transition",
      "name": "storage.type.transition.leo",
      "match": "\\b(transition)\\b"
    },
    "inline_keyword": {
      "comment": "Storage type inline",
      "name": "storage.type.inline.leo",
      "match": "\\b(inline)\\b"
    },
    "core_types": {
      "comment": "Built-in/core type",
      "name": "storage.type.core.leo",
      "match": "\\b(bool|field|scalar|u8|u16|u32|u64|u128|i8|i16|i32|i64|i128|string|address|signature|group|integer)\\b"
    },
    "variable_declaration": {
      "comment": "Variable declaration",
      "begin": "(?:(?<=\\blet\\b))\\s*\\w+\\s*\\:\\s*",
      "end": "\\=",
      "patterns": [
        {
          "include": "#core_types"
        }
      ]
    },
    "mapping_declaration": {
      "comment": "Mapping declaration",
      "begin": "(?<=\\bmapping\\b)\\s+\\w+\\:s*",
      "end": "$",
      "patterns": [
        {
          "include": "#core_types"
        }
      ]
    },
    "return_type": {
      "comment": "Return type",
      "begin": "(?<=->)",
      "end": "(?={)",
      "patterns": [
        {
          "include": "#core_types"
        },
        {
          "include": "#storage_type_public"
        },
        {
          "include": "#storage_type_private"
        },
        {
          "include": "#storage_type_constant"
        }
      ]
    },
    "statement_for_iterator_type": {
      "comment": "Statement for iterator type",
      "begin": "(?<=for)\\s*\\w+:\\s*",
      "end": "(?=in)",
      "patterns": [
        {
          "include": "#core_types"
        }
      ]
    },
    "console_methods": {
      "comment": "Console methods",
      "match": "\\b(assert|assert_eq|assert_neq)\\b",
      "captures": {
        "1": {
          "name": "entity.name.method.console.leo"
        }
      }
    },
    "method_name_call": {
      "comment": "Method name call",
      "match": "\\w+\\s*\\.\\s*([a-zA-Z][a-zA-Z0-9_]*)\\s*",
      "captures": {
        "1": {
          "name": "circuit.method.name.call"
        }
      }
    },
    "inside_braces": {
      "comment": "Inside braces (sub-rule for use in function)",
      "name": "punctuation.braces.leo",
      "begin": "\\{",
      "end": "\\}",
      "patterns": [
        {
          "include": "#variable_declaration"
        },
        {
          "include": "#statement_for_iterator_type"
        },
        {
          "include": "#return_type"
        },
        {
          "include": "#mapping_declaration"
        },
        {
          "include": "#function_parameters"
        },
        {
          "include": "#function_declaration"
        },
        {
          "include": "#special_functions_call"
        },
        {
          "include": "#async_keyword"
        },
        {
          "include": "#function_keyword"
        },
        {
          "include": "#finalize_keyword"
        },
        {
          "include": "#struct_keyword"
        },
        {
          "include": "#program_keyword"
        },
        {
          "include": "#transition_keyword"
        },
        {
          "include": "#inline_keyword"
        },
        {
          "include": "#record_strucut_definition"
        },
        {
          "include": "#storage_type_mapping"
        },
        {
          "include": "#import_file"
        },
        {
          "include": "#program_file"
        },
        {
          "include": "#inside_braces"
        },
        {
          "include": "#block_comment"
        },
        {
          "include": "#line_comment"
        },

        {
          "include": "#integer_literal"
        },
        {
          "include": "#core_types"
        },
        {
          "include": "#address_literal"
        },
        {
          "include": "#built-in_core_assign"
        },
        {
          "include": "#boolean_constant"
        },
        {
          "include": "#control_keyword"
        },
        {
          "include": "#storage_type_public"
        },
        {
          "include": "#storage_type_private"
        },
        {
          "include": "#storage_type_constant"
        },
        {
          "include": "#storage_type_record"
        },
        {
          "include": "#storage_type_let"
        },
        {
          "include": "#storage_type_then"
        },
        {
          "include": "#string_literal"
        },
        {
          "include": "#invoking_attribute"
        },
        {
          "include": "#console_methods"
        },
        {
          "include": "#type_params"
        },
        {
          "include": "#circuit_static_call"
        },
        {
          "include": "#method_name_call"
        },
        {
          "include": "#console_methods"
        },

        {
          "comment": "Context Annotation",
          "name": "context.annotation.leo",
          "match": "@[a-zA-Z][a-zA-Z0-9_]*"
        }
      ]
    }
  }
}
